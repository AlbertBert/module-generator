#!/usr/bin/env node

const program = require('commander');
const chalk = require('chalk');
const readline = require('readline');
const fs = require('fs');
const path = require('path');
const fsExtra = require('fs-extra')
const mkdirsSync = fsExtra.ensureDirSync;
const child_process = require('child_process');
const exec = child_process.exec;
const error = chalk.bold.red;
const info = chalk.bold.blue;
const package = require('../package.json');
const version = package.version;
const basePath = process.cwd();
let dirValue;

program
  .version(version, '-v, --version')  // 设置命令的版本号，从package.json中读取，可以用-v或--version查询
  .usage('<dir> [options]')   // 设置命令的用法说明
  .arguments('<dir> [env]')   // 设置命名后面要接的参数，<>的参数表示必要参数,[]表示可选参数
  .action(function(dir) {  // action用于设置回调函数，其中回调函数的参数就是arguments中的参数
    dirValue = dir;
  })
  .description('<dir> must be input')  // 设置命令的描述
  .parse(process.argv);                // 一般最后调用，用于解析process.argv参数
// 若没有输入要生成的项目名，则会有报错提示
if (typeof dirValue == 'undefined') {
  console.log(error('must be input dir name!\n'));
  console.log(error('example:\n'));
  console.log(error('generater dir\n'));
}

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
})

main();

function main() {
  //const curName = program.args.shift();
  //const destinationPath = `${process.cwd()}/${curName}`;
  const desPath = path.join(basePath, dirValue);
  const step1 = readPromise(info('do you need test, continue? [y/N] '), (answer) => {
    if (/y|yes|ok|true/.test(answer)) {
      program.test = true;
    }
  });
  const step2 = readPromise(info('do you need demo, continue? [y/N] '), (answer) => {
    if (/y|yes|ok|true/.test(answer)) {
      program.demo = true;
    }
  })
  const step3 = readPromise(info('do you need .gitignore, continue? [y/N] '), (answer) => {
    if (/y|yes|ok|true/.test(answer)) {
      program.gitignore = true;
    } 
  })
  const step4 = readPromise(info('do you need vue project, continue? [y/N] '), (answer) => {
    if (/y|yes|ok|true/.test(answer)) {
      program.vue = true;
    }
  })
  const step5 = readPromise(info('destination is not empty, continue? [y/N]'), (answer) => {
    if (/y|yes|ok|true/.test(answer)) {
      exec(`rm -rf ${desPath}`, (err, stdout, stderr) => {
        if (err) {
          console.error(`exec error: ${error}`);
          return;
        }
        createFolds(desPath);
      })
    } else {
      console.error(error(`aborting`));
      process.exit(1);
    }
  })
  fs.readdir(desPath, (err, files) => {
    if (err && err.code !== 'ENOENT') {
      throw err;
    }
    if (files && files.length) {
      compose(step1, step2, step3, step4, step5, close);
    } else {
      compose(step1, step2, step3, step4, close).then(() => {
        createFolds(desPath);
      })
    }
  })
}

function close() {
  return rl.close();
}

// 将逐行读取等待用户输入封装成一个个的promise，以便依次执行
function readPromise(question, callback) {
  return function() {
    return new Promise((resolve) => {
      rl.question(question, (answer) => {
        callback(answer);
        resolve();
      })
    })
  }
}
// 使用数组的reduce方法使得多个promise能够依次串行执行
function compose(...args) {
  // 最终返回的结果执行完最后一个promise返回的结果
  // 使用一个Promise.resolve()作为最开始的temp
  return args.reduce((formerStep, laterStep) => {
    return formerStep.then(() => {
      return laterStep();
    })
  }, Promise.resolve())
}

function createFolds(basePath) {
  mkdirsSync(basePath);
  // README.md
  copyTemplate('md/README.md', 'README.md');
  // package.json
  copyTemplate('package/package.json', 'package.json');
  // .eslintrc
  copyTemplate('eslint/.eslintrc', '.eslintrc');
  // .babelrc
  copyTemplate('babel/.babelrc', '.babelrc');
  // .gitignore
  if (program.gitignore) {
    copyTemplate('gitignore/.gitignore', '.gitignore');
  }
  // demo
  if (program.demo) {
    mkdirsSync(basePath + '/demo');
    if (program.vue) {
      copyTemplate('html/index-vue.html', 'demo/index.html');
    } else {
      copyTemplate('html/index.html', 'demo/index.html');
    }
  }
  // test
  mkdirsSync(basePath + '/test');
  // src
  mkdirsSync(basePath + '/src');
  const dest_dir = path.join(basePath, 'src/common');
  const source_dir = path.join(__dirname, '..', 'template', '/css/common-less');
  const destSrc = path.join(basePath, 'src');
  const sourceSrc = path.resolve(__dirname, program.vue?'../template/vue-src':'../template/src') + '/*';
  mkdirsSync(basePath + '/src');
  exec(`cp -rf ${sourceSrc} ${destSrc}`, (err, stdout, stderr) => {
    if (err) {
      console.log(error(`exec error: ${err}`));
    }
    exec(`cp -r ${source_dir} ${dest_dir}`, (err, stdout, stderr) => {
      if (err) {
        console.log(error(`exec error: ${err}`));
      }
    })
    switch (program.css) {
      case 'css':
      copyTemplate('css/style.css', '/src/index.css');
      break;
      default:
      copyTemplate('css/style.less', '/src/index.less');
      break;
    }
  })
}

function copyTemplate(from, to) {
  from = path.resolve(__dirname, '../template/', from);
  to = path.join(basePath, dirValue, to);
  try {
    const data = fs.readFileSync(from);
    fs.writeFileSync(to, data);
    console.log(info('   create : ') + to);
  } catch (err) {
    console.log(error('   create : ' + to + ' fail'));
  }
}

function ejsTemplate(to, name, state) {
  try {
    const contents = fs.readFileSync(path.join(__dirname, '..', 'templates', (name + '.ejs')), 'utf-8');
    fs.writeFileSync(to, ejs.render(contents, state));
    console.log(info('   create : ') + to);
  } catch (err) {
    console.log(error('   create : ' + to + ' fail'));
  }
}
